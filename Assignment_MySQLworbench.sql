-- Basic Questions
-- 1. List all unique cities where customers are located
SELECT DISTINCT customer_city 
FROM customers;

-- 2. Count the number of orders placed in 2017
SELECT COUNT(*) AS total_orders_2017
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category
SELECT * FROM products;

SELECT 
    p.product_category,
    ROUND(SUM(oi.price + oi.freight_value), 2) AS total_sales
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_category
ORDER BY total_sales DESC;

-- 4. Calculate the percentage of orders that were paid in installments
SELECT 
    ROUND(100.0 * COUNT(DISTINCT CASE 
        WHEN payment_installments > 1 THEN order_id 
        END) / COUNT(DISTINCT order_id), 2) AS percent_in_installments
FROM payments;

-- 5. Count the number of customers from each state
SELECT customer_state, COUNT(*) AS total_customers
FROM customers
GROUP BY customer_state
ORDER BY total_customers DESC;

-- Intermeditate problems
-- 1. Calculate the number of orders per month in 2018
SELECT 
    MONTH(order_purchase_timestamp) AS order_month,
    COUNT(order_id) AS total_orders
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTH(order_purchase_timestamp)
ORDER BY order_month;

-- 2. Find the average number of products per order, grouped by customer city
SELECT * 
FROM customers;

SELECT 
    sub.customer_city,
    AVG(sub.products_per_order) AS avg_products_per_order
FROM (
    SELECT 
        o.order_id,
        cu.customer_city,
        COUNT(oi.order_item_id) AS products_per_order
    FROM orders o
    JOIN customers cu ON o.customer_id = cu.customer_id
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.order_id, cu.customer_city
) AS sub
GROUP BY sub.customer_city
ORDER BY avg_products_per_order DESC;



-- 3. Calculate the percentage of total revenue contributed by each product category
SELECT 
    p.product_category,
    ROUND(SUM(oi.price + oi.freight_value) * 100.0 / 
        (SELECT SUM(price + freight_value) FROM order_items), 2) AS revenue_percentage
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_category
ORDER BY revenue_percentage DESC;

-- 4. Identify the correlation between product price and number of times a product has been purchased
SELECT 
    p.product_id,
    AVG(oi.price) AS avg_price,
    COUNT(oi.order_id) AS purchase_count
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_id;

-- 5.Calculate the total revenue generated by each seller and rank them by revenue
SELECT 
    s.seller_id,
    SUM(oi.price + oi.freight_value) AS total_revenue
FROM order_items oi
JOIN sellers s ON oi.seller_id = s.seller_id
GROUP BY s.seller_id
ORDER BY total_revenue DESC;

-- Advanced problems
-- 1. Moving average of order values per customer
WITH customer_orders AS (
    SELECT 
        o.customer_id,
        o.order_id,
        o.order_purchase_timestamp,
        SUM(oi.price + oi.freight_value) AS order_value
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.customer_id, o.order_id, o.order_purchase_timestamp
)
SELECT 
    customer_id,
    order_id,
    order_purchase_timestamp,
    order_value,
    ROUND(AVG(order_value) OVER (
        PARTITION BY customer_id 
        ORDER BY order_purchase_timestamp 
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ), 2) AS moving_avg_3_orders
FROM customer_orders;

-- 2. Cumulative sales per month per year
WITH monthly_sales AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS order_year,
        MONTH(o.order_purchase_timestamp) AS order_month,
        SUM(oi.price + oi.freight_value) AS monthly_revenue
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY YEAR(o.order_purchase_timestamp), MONTH(o.order_purchase_timestamp)
)
SELECT *,
    SUM(monthly_revenue) OVER (PARTITION BY order_year ORDER BY order_month) AS cumulative_sales
FROM monthly_sales;

-- 3. Year-over-year growth rate of total sales
WITH yearly_sales AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS order_year,
        SUM(oi.price + oi.freight_value) AS total_sales
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY YEAR(o.order_purchase_timestamp)
)
SELECT 
    order_year,
    total_sales,
    LAG(total_sales) OVER (ORDER BY order_year) AS previous_year_sales,
    ROUND(
        100 * (total_sales - LAG(total_sales) OVER (ORDER BY order_year)) / 
        NULLIF(LAG(total_sales) OVER (ORDER BY order_year), 0), 2
    ) AS yoy_growth_percent
FROM yearly_sales;

-- 4. Retention rate: customers with a repeat order within 6 months
WITH first_orders AS (
    SELECT 
        customer_id,
        MIN(order_purchase_timestamp) AS first_order_date
    FROM orders
    GROUP BY customer_id
),
repeat_customers AS (
    SELECT 
        o.customer_id
    FROM orders o
    JOIN first_orders f ON o.customer_id = f.customer_id
    WHERE o.order_purchase_timestamp > f.first_order_date
      AND o.order_purchase_timestamp <= DATE_ADD( f.first_order_date)
)
SELECT 
    CAST(COUNT(DISTINCT repeat_customers.customer_id) AS DECIMAL(10,2)) * 100.0 / 
    COUNT(DISTINCT first_orders.customer_id) AS retention_rate_percent
FROM first_orders
LEFT JOIN repeat_customers ON first_orders.customer_id = repeat_customers.customer_id;


-- run it in mysql workbench

-- 5. Top 3 customers by total spend in each year
WITH customer_yearly_spending AS (
    SELECT 
        o.customer_id,
        YEAR(o.order_purchase_timestamp) AS order_year,
        SUM(oi.price + oi.freight_value) AS total_spent
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.customer_id, YEAR(o.order_purchase_timestamp)
),
ranked_spending AS (
    SELECT *,
        RANK() OVER (PARTITION BY order_year ORDER BY total_spent DESC) AS spending_rank
    FROM customer_yearly_spending
)
SELECT *
FROM ranked_spending
WHERE spending_rank <= 3;







